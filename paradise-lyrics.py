#!/usr/bin/env python3

##############################
# Utilities
##############################

import json
import requests

def clockDigitsInsertIfNeeds(digits):
    if digits < 10:
        digits = f"0{digits}"

    return digits

def convertStringToNumber(number):
    if isinstance(number, str):
        number = float(number)
    
    return number

def convertFromMillisecondsToMilliseconds(milliseconds):
    return int((milliseconds % 1000) / 10)

def convertFromMillisecondsToSeconds(milliseconds):
    return int((milliseconds / 1000) % 60)
    
def convertFromMillisecondsToMinutes(milliseconds):
    return int((milliseconds / (1000 * 60)) % 60)

def convertFromMillisecondsToHours(milliseconds):
    return int((milliseconds / (1000 * 60 * 60)) % 24)

def formatSyntaxLyricsAsHHMMSSmmm(durationMilliseconds):
    timeMilliseconds = convertFromMillisecondsToMilliseconds(durationMilliseconds)
    timeSeconds = convertFromMillisecondsToSeconds(durationMilliseconds)
    timeMinutes = convertFromMillisecondsToMinutes(durationMilliseconds)
    timeHours = convertFromMillisecondsToHours(durationMilliseconds)

    timeMilliseconds = clockDigitsInsertIfNeeds(timeMilliseconds)
    timeSeconds = clockDigitsInsertIfNeeds(timeSeconds)
    timeMinutes = clockDigitsInsertIfNeeds(timeMinutes)
    timeHours = clockDigitsInsertIfNeeds(timeHours)

    return f'{timeHours}:{timeMinutes}:{timeSeconds}:{timeMilliseconds}'

def formatSyntaxLyricsAsHHMMSS(durationMilliseconds):
    timeMilliseconds = convertFromMillisecondsToMilliseconds(durationMilliseconds)
    timeSeconds = convertFromMillisecondsToSeconds(durationMilliseconds)
    timeMinutes = convertFromMillisecondsToMinutes(durationMilliseconds)
    timeHours = convertFromMillisecondsToHours(durationMilliseconds)

    timeSeconds = clockDigitsInsertIfNeeds(timeSeconds)
    timeMinutes = clockDigitsInsertIfNeeds(timeMinutes)
    timeHours = clockDigitsInsertIfNeeds(timeHours)

    return f'{timeHours}:{timeMinutes}:{timeSeconds}'

def formatSyntaxLyricsAsMMSSmmm(durationMilliseconds):
    timeMilliseconds = convertFromMillisecondsToMilliseconds(durationMilliseconds)
    timeSeconds = convertFromMillisecondsToSeconds(durationMilliseconds)
    timeMinutes = convertFromMillisecondsToMinutes(durationMilliseconds)
    timeHours = convertFromMillisecondsToHours(durationMilliseconds)

    timeSeconds = clockDigitsInsertIfNeeds(timeSeconds)
    timeMinutes = clockDigitsInsertIfNeeds(timeMinutes)

    return f'{timeMinutes}:{timeSeconds}:{timeMilliseconds}'

def formatSyntaxLyricsAsMMSS(durationMilliseconds):
    timeMilliseconds = convertFromMillisecondsToMilliseconds(durationMilliseconds)
    timeSeconds = convertFromMillisecondsToSeconds(durationMilliseconds)
    timeMinutes = convertFromMillisecondsToMinutes(durationMilliseconds)
    timeHours = convertFromMillisecondsToHours(durationMilliseconds)

    timeSeconds = clockDigitsInsertIfNeeds(timeSeconds)
    timeMinutes = clockDigitsInsertIfNeeds(timeMinutes)

    return f'{timeMinutes}:{timeSeconds}'

def getDataJson(url):
    headers = {'Accept': 'application/json'}
    r = requests.get(url, headers=headers)

    return r.json()

def generateUrlSpotify(trackId):
    urlBase = 'https://spotify-lyric-api.herokuapp.com/?url='
    urlSpotify = 'https://open.spotify.com/track/'
    urlSufix='?autoplay=true'

    return urlBase + urlSpotify + trackId + urlSufix

def main(trackIdSpotify, lyricsSyntax):
    urlSpotify = generateUrlSpotify(trackIdSpotify)
    #print("Requesting the " + urlSpotify + " url...")

    dataJsonResponse = getDataJson(urlSpotify)
    dataJsonStatusError = dataJsonResponse['error']
    #print(dataJsonResponse)

    if dataJsonStatusError == False:
        dataJsonStatusTypeSyncronized = dataJsonResponse['syncType']

        if dataJsonStatusTypeSyncronized == "LINE_SYNCED":
            #print('Syncronized lyrics are available \o/')
            #print(dataJsonResponse['lines'])
            #print(dataJsonResponse['lines'][2])
            #print(dataJsonResponse['lines'][2]['startTimeMs'])

            # Initialize the array variables
            startTimeMs = []
            words = []
            #syllables = []
            endTimeMs = []

            # Store the lines contents into an array
            for i in dataJsonResponse['lines']:
                startTimeMs.append(i['startTimeMs'])
                words.append(i['words'])
                #syllables.append(i['syllables'])
                endTimeMs.append(i['endTimeMs'])

            print('[Author:Henrik Beck]')
            print('[Credit:Generated by Lyrics Paradise]')
            print('[URL:https://github.com/henrikbeck95/paradise-lyrics]')
            print('[Source:https://spotify-lyric-api.herokuapp.com/]')
            print('')
            #print('[length:]')

            # Generate the lyrics content
            for i in range(len(words)):
                aux = ''
                timeMilliseconds = int(convertStringToNumber(startTimeMs[i]))

                if lyricsSyntax == 'hhmmssmmm':
                    aux = f'[{formatSyntaxLyricsAsHHMMSSmmm(timeMilliseconds)}]'
                elif lyricsSyntax == 'hhmmss':
                    aux = f'[{formatSyntaxLyricsAsHHMMSS(timeMilliseconds)}]'
                elif lyricsSyntax == 'mmssmmm':
                    aux = f'[{formatSyntaxLyricsAsMMSSmmm(timeMilliseconds)}]'
                elif lyricsSyntax == 'mmss':
                    aux = f'[{formatSyntaxLyricsAsMMSS(timeMilliseconds)}]'
                else:
                    aux = ''

                print(f'{aux}{words[i]}')
        else:
            #print('Only static lyrics are available')
            exit(0)

    else:
        print('Could not be found lyrics for this track!')
        exit(1)

##############################
# Arguments
##############################

trackIdSpotify = '0nLiqZ6A27jJri2VCalIUs' # Valid
#trackIdSpotify = '0nLiqZ6A27jJri2VCalIUz' # Invalid

#lyricsSyntax = ''
#lyricsSyntax = 'hhmmssmmm'
#lyricsSyntax = 'hhmmss'
lyricsSyntax = 'mmssmmm'
#lyricsSyntax = 'mmss'

main(trackIdSpotify, lyricsSyntax)